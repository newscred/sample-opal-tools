"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolsService = void 0;
const express_1 = __importDefault(require("express"));
const models_1 = require("./models");
const registry_1 = require("./registry");
class ToolsService {
    /**
     * Initialize a new tools service
     * @param app Express application
     */
    constructor(app) {
        this.functions = [];
        this.app = app;
        this.router = express_1.default.Router();
        this.initRoutes();
        // Register this service in the global registry
        registry_1.registry.services.push(this);
    }
    /**
     * Initialize the discovery endpoint
     */
    initRoutes() {
        this.router.get('/discovery', (req, res) => {
            res.json({ functions: this.functions.map(f => f.toJSON()) });
        });
        this.app.use(this.router);
    }
    /**
     * Register a tool function
     * @param name Tool name
     * @param description Tool description
     * @param handler Function implementing the tool
     * @param parameters List of parameters for the tool
     * @param endpoint API endpoint for the tool
     * @param authRequirements Authentication requirements (optional)
     */
    registerTool(name, description, handler, // Changed from Function to any to avoid confusion with built-in Function type
    parameters, endpoint, authRequirements) {
        const func = new models_1.Function(name, description, parameters, endpoint, authRequirements);
        this.functions.push(func);
        // Register the actual endpoint
        this.router.post(endpoint, async (req, res) => {
            try {
                console.log(`Received request for ${endpoint}:`, req.body);
                // Extract parameters from the request body
                let params;
                if (req.body && req.body.parameters) {
                    // Standard format: { "parameters": { ... } }
                    params = req.body.parameters;
                    console.log(`Extracted parameters from 'parameters' key:`, params);
                }
                else {
                    // Fallback for direct testing: { "name": "value" }
                    console.log(`Warning: 'parameters' key not found in request body. Using body directly.`);
                    params = req.body;
                }
                // Extract auth data if available
                const authData = req.body && req.body.auth;
                if (authData) {
                    console.log(`Auth data provided for provider: ${authData.provider || 'unknown'}`);
                }
                // Call the handler with extracted parameters and auth data
                // Check if handler accepts auth as third parameter
                const handlerParamCount = handler.length;
                let result;
                if (handlerParamCount >= 2) {
                    // Handler accepts auth data
                    result = await handler(params, authData);
                }
                else {
                    // Handler doesn't accept auth data
                    result = await handler(params);
                }
                console.log(`Tool ${name} returned:`, result);
                res.json(result);
            }
            catch (error) {
                console.error(`Error in tool ${name}:`, error);
                res.status(500).json({ error: error.message || 'Unknown error' });
            }
        });
    }
}
exports.ToolsService = ToolsService;
