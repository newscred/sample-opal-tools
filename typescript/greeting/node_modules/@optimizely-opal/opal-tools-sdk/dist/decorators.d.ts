import 'reflect-metadata';
import { ParameterType } from './models';
interface ParameterDefinition {
    name: string;
    type: ParameterType;
    description: string;
    required: boolean;
}
interface ToolOptions {
    name: string;
    description: string;
    parameters?: ParameterDefinition[];
    authRequirements?: {
        provider: string;
        scopeBundle: string;
        required?: boolean;
    };
}
/**
 * Decorator to register a function as an Opal tool
 * @param options Tool options including:
 *   - name: Name of the tool
 *   - description: Description of the tool
 *   - authRequirements: (Optional) Authentication requirements
 *     Format: { provider: "oauth_provider", scopeBundle: "permissions_scope", required: true }
 *     Example: { provider: "google", scopeBundle: "calendar", required: true }
 *
 * Note: If your tool requires authentication, define your handler function with two parameters:
 * ```
 * async function myTool(parameters: ParameterInterface, authData?: any): Promise<any> {
 *   // Your tool implementation
 * }
 * ```
 */
export declare function tool(options: ToolOptions): (target: any, propertyKey?: string, descriptor?: PropertyDescriptor) => any;
export {};
