/**
 * Types of parameters supported by Opal tools
 */
export enum ParameterType {
  String = 'string',
  Integer = 'integer',
  Number = 'number',
  Boolean = 'boolean',
  List = 'list',
  Dictionary = 'object'
}

/**
 * Parameter definition for an Opal tool
 */
export class Parameter {
  /**
   * Create a new parameter definition
   * @param name Parameter name
   * @param type Parameter type
   * @param description Parameter description
   * @param required Whether the parameter is required
   */
  constructor(
    public name: string,
    public type: ParameterType,
    public description: string,
    public required: boolean
  ) {}

  /**
   * Convert to JSON for the discovery endpoint
   */
  toJSON() {
    return {
      name: this.name,
      type: this.type,
      description: this.description,
      required: this.required
    };
  }
}

/**
 * Authentication requirements for an Opal tool
 */
export class AuthRequirement {
  /**
   * Create a new authentication requirement
   * @param provider Auth provider (e.g., "google", "microsoft")
   * @param scopeBundle Scope bundle (e.g., "calendar", "drive")
   * @param required Whether authentication is required
   */
  constructor(
    public provider: string,
    public scopeBundle: string,
    public required: boolean = true
  ) {}

  /**
   * Convert to JSON for the discovery endpoint
   */
  toJSON() {
    return {
      provider: this.provider,
      scope_bundle: this.scopeBundle,
      required: this.required
    };
  }
}

/**
 * Function definition for an Opal tool
 */
export class Function {
  /**
   * HTTP method for the endpoint (default: POST)
   */
  public httpMethod: string = 'POST';

  /**
   * Create a new function definition
   * @param name Function name
   * @param description Function description
   * @param parameters Function parameters
   * @param endpoint API endpoint
   * @param authRequirements Authentication requirements (optional)
   */
  constructor(
    public name: string,
    public description: string,
    public parameters: Parameter[],
    public endpoint: string,
    public authRequirements?: AuthRequirement[]
  ) {}

  /**
   * Convert to JSON for the discovery endpoint
   */
  toJSON() {
    const result: any = {
      name: this.name,
      description: this.description,
      parameters: this.parameters.map(p => p.toJSON()),
      endpoint: this.endpoint,
      http_method: this.httpMethod
    };

    if (this.authRequirements && this.authRequirements.length > 0) {
      result.auth_requirements = this.authRequirements.map(auth => auth.toJSON());
    }

    return result;
  }
}
