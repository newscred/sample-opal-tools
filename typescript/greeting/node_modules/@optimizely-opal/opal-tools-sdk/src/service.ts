import express, { Express, Request, Response, Router } from 'express';
import { Function, AuthRequirement, Parameter } from './models';
import { registry } from './registry';

export class ToolsService {
  private app: Express;
  private router: Router;
  private functions: Function[] = [];

  /**
   * Initialize a new tools service
   * @param app Express application
   */
  constructor(app: Express) {
    this.app = app;
    this.router = express.Router();
    this.initRoutes();
    
    // Register this service in the global registry
    registry.services.push(this);
  }

  /**
   * Initialize the discovery endpoint
   */
  private initRoutes(): void {
    this.router.get('/discovery', (req: Request, res: Response) => {
      res.json({ functions: this.functions.map(f => f.toJSON()) });
    });

    this.app.use(this.router);
  }

  /**
   * Register a tool function
   * @param name Tool name
   * @param description Tool description
   * @param handler Function implementing the tool
   * @param parameters List of parameters for the tool
   * @param endpoint API endpoint for the tool
   * @param authRequirements Authentication requirements (optional)
   */
  registerTool(
    name: string,
    description: string,
    handler: any, // Changed from Function to any to avoid confusion with built-in Function type
    parameters: Parameter[],
    endpoint: string,
    authRequirements?: AuthRequirement[]
  ): void {
    const func = new Function(name, description, parameters, endpoint, authRequirements);
    this.functions.push(func);
    
    // Register the actual endpoint
    this.router.post(endpoint, async (req: Request, res: Response) => {
      try {
        console.log(`Received request for ${endpoint}:`, req.body);
        
        // Extract parameters from the request body
        let params;
        if (req.body && req.body.parameters) {
          // Standard format: { "parameters": { ... } }
          params = req.body.parameters;
          console.log(`Extracted parameters from 'parameters' key:`, params);
        } else {
          // Fallback for direct testing: { "name": "value" }
          console.log(`Warning: 'parameters' key not found in request body. Using body directly.`);
          params = req.body;
        }
        
        // Extract auth data if available
        const authData = req.body && req.body.auth;
        if (authData) {
          console.log(`Auth data provided for provider: ${authData.provider || 'unknown'}`);
        }
        
        // Call the handler with extracted parameters and auth data
        // Check if handler accepts auth as third parameter
        const handlerParamCount = handler.length;
        let result;
        
        if (handlerParamCount >= 2) {
          // Handler accepts auth data
          result = await handler(params, authData);
        } else {
          // Handler doesn't accept auth data
          result = await handler(params);
        }
        
        console.log(`Tool ${name} returned:`, result);
        res.json(result);
      } catch (error: any) {
        console.error(`Error in tool ${name}:`, error);
        res.status(500).json({ error: error.message || 'Unknown error' });
      }
    });
  }
}
